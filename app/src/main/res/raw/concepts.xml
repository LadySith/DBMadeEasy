<?xml version="1.0" encoding="utf-8"?>
<Concepts>
    <Concept title="Introduction to Databases and DBMS" summary="Imagine operating a business without having a record of your customers, products, employees, who owes you money and whom you owe money. In simple terms, a database is used to store, manage and exploit data sets. Database applications are used to track things and produce reports, while forms are used to enter, read, delete and query data." videoId="intro_to_dbms">
        <Pages>
            <Page title="" imgId="">
                Imagine operating a business without having a record of your customers, products, employees, who owes you money and whom you owe money. In simple terms, a database is used to store, manage and exploit data sets. Database applications are used to track things and produce reports, while forms are used to enter, read, delete and query data.
            </Page>
            <Page title="What is Database?" imgId="">
                A database is an integrated collection of stored data that is centrally managed and controlled. A Database possesses features such as:
                • Class attributes 
                • Associations 
                • Descriptive information about data, restrictions
                • Physical data store - Raw bit and bytes of the database
                • Schema - Access and data controls, associations among attributes, details of physical data store "
            </Page>
            <Page title="What is a Database Management System (DBMS)" imgId="">
                A DBMS is a system software component that manages and controls access to the database. Examples include Oracle, MS Access, SQL Server and DB2. It has interfaces to access schema and extract information for valid requests. A DBMS facilitates data access programs and subroutines.
            </Page>
            <Page title="Data versus Information" imgId="img11">
                Data:
                • raw facts (raw indicates that the facts have not yet been processed to reveal their meaning)
                • building blocks of information
                • must be stored and accessed properly 
                
                Information:
                • produced by processing data
                • reveals meaning data "
            </Page>
            <Page title="File-based System vs. Database System" imgId="">
                File-based System
                The traditional File-based system is an approach to storing and organizing data and information. Using methods such as indexing, data that is stored in files can be accessed and manipulated.
                Database System
                A database represents a change in the way end user data are stored, accessed, and managed. Logically related data are stored in a single data repository.
            </Page>
            <Page title="File-based System Critique" imgId="img12">
                A File System may make data management difficult for any or all of the following reasons:
                • They require extensive programming in 3GL.
                • As file systems become more complex, managing files gets more difficult.
                • Security features are difficult to implement and are lacking.
                • Changing requirements mandate changes in existing file structures.
                • Programs accessing a file are subject to change when the file structure changes. Tis requires more maintenance.
                Structural and Data Dependence
                Structural Dependence: 
                • A change in any file’s structure requires the modification of all programs using that file.
                Data Dependence:
                • A change in any file’s data characteristics requires changes of all data access programs. Example: integer to decimal
                Structural and data dependence make file systems very difficult to manage making file systems management high maintenance.
                Data Redundancy
                This occurs when the same information is stored in more than one place. Problems that rise due to uncontrolled data redundancy include:
                • Data Inconsistency - when different and conflicting versions of the same data appear in different places
                • Data anomalies:
                oModification anomalies (Inconsistent data due to modifications).
                oInsertion anomalies (Inconsistent data due to insertions) 
                oDeletion anomalies (Inconsistent data due to deletions)
            </Page>
            <Page title="Functions of a DBMS" imgId="">
                1.Data Dictionary Management
                Data dictionary stores definitions of the data elements and their relationships (metadata). It removes structural and data dependency from the system.
                2.Data Storage Management
                DBMS creates data storage structure and relieves the programmer from the task of defining and programming physical data characteristics.
                3.Data Transformation and Presentation
                DBMS transforms data from its logical format to its physical format and vice versa.
                4.Security Management
                DBMS provides user security and data privacy within the database. Data security is especially important in multi-user database.
                5.Multi-User Access Control
                DBMS ensures that multiple users can access the database concurrently and still guarantees the integrity of the database.
                6.Backup and Recovery Management
                DBMS provides backup and recovery procedures to ensure data safety and integrity.
                7.Data Integrity Management
                DBMS promotes and enforces integrity rules to eliminate data integrity problems.
                8.Database Access Languages &amp; Application Programming Interfaces
                The DBMS’s non procedural query language simplifies data access by specifying what must be done without specifying how it must be done. Data Definition Language (DDL) is used to define the database structure while Data Manipulation Language (DML) is used for accessing and manipulating data. DBMS also provides interfaces to application programs written in procedural languages such as COBOL, C etc.
                9.Database Communication Interfaces
                DBMS provides communication interfaces so that the database can be accessed through a network (internet).
            </Page>
        </Pages>
        <Quizzes>
            <Quiz question="Information is">
                <Answers solution="c">
                    <Answer index="a">Another word for data</Answer>
                    <Answer index="b">The definition of data</Answer>
                    <Answer index="c">Processed data that reveals meaning</Answer>
                    <Answer index="d">Stuff about stuff</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Data is">
                <Answers solution="d">
                    <Answer index="a">Another word for information</Answer>
                    <Answer index="b">Information that is used in databases</Answer>
                    <Answer index="c">Numbers and words with meaning</Answer>
                    <Answer index="d">Raw facts that are the building blocks of information</Answer>
                </Answers>
            </Quiz>
            <Quiz question="From the reasons below, select a reason why a file-based system is problematic.">
                <Answers solution="b">
                    <Answer index="a">It is too old-school</Answer>
                    <Answer index="b">Security features are difficult to implement and are lacking</Answer>
                    <Answer index="c">It is not compatible with modern systems</Answer>
                    <Answer index="d">System updates are not available</Answer>
                </Answers>
            </Quiz>
            <Quiz question="What is Data Dependence?">
                <Answers solution="b">
                    <Answer index="a">The antonym of Data Independence</Answer>
                    <Answer index="b">Describes a change in any file’s data characteristics requiring changes of all data access programs.</Answer>
                    <Answer index="c">It is when we depend on data for information</Answer>
                    <Answer index="d">Describes a change in any file’s information requiring changes of all file access programs.</Answer>
                </Answers>
            </Quiz>
            <Quiz question="What is Structural Dependence?">
                <Answers solution="d">
                    <Answer index="a">The antonym of Structural Independence</Answer>
                    <Answer index="b">A change in any file’s data structure requiring changes of all data access programs</Answer>
                    <Answer index="c">It is the structure of the information in a DBMS</Answer>
                    <Answer index="d">A change in any file’s structure requiring the modification of all programs using that file.</Answer>
                </Answers>
            </Quiz>
            <Quiz question="From the choices below, select three functions of a DBMS.">
                <Answers solution="b">
                    <Answer index="a">Backup and Recovery Management</Answer>
                    <Answer index="b">Data Management</Answer>
                    <Answer index="c">Multi- user Access Control</Answer>
                    <Answer index="d">Database Communication Interfaces</Answer>
                </Answers>
            </Quiz>
        </Quizzes>
    </Concept>
    <Concept title="The Relational Database Model" summary="" videoId="relational_dbms">
        <Pages>
            <Page title="Database Models" imgId="">
                A Database Model determines the logical structure of a database and drives the way data will be stored, organized, viewed, represented, and manipulated. The model also determines how the data can be interrelated. 
                
                There are two categories of Database Models:
                
                Conceptual models - concerned with what is represented rather than how it is represented. (E-R model, OO)
                
                Implementation models - place the emphasis on how the data are represented in the database or on how the data structures are implemented. (Hierarchical, Network, Relational) "
            </Page>
            <Page title="The Relational Model" imgId="img21">
                This is the current database implementation standard. The data is perceived as being stored in tables (two dimensional data structures consisting of columns and rows). Tables are related to each other by means of common values in common attributes.
                
                The characteristics of a Relation (dataset) are as follows:
                
                • Rows contain data about an entity
                • Columns contain data about attributes of the entity
                • Cells of the table hold a single value
                • All entries in a column are of the same kind
                • Each column has a unique name
                • The order of the columns is unimportant
                • The order of the rows is unimportant
                • No two rows may be identical 
                
                How do we make sure that no two rows are identical?
                
                Relational Keys
                
                A key is one (or more) columns of a relation that is (are) used to identify a row. It must be unique. Types of relational keys include:
                
                • Primary key - unique attribute for the record 
                • Composite key - a combination of two or more attributes representing the key
                • Foreign key - To preserve relationships (A foreign key is a primary key from one table placed into another table).
            </Page>
            <Page title="Relational Databases" imgId="img23">
                A Relational database is perceived by the user as a collection of tables in which data are stored. Each table consists of series of row/column intersections. Tables (or relations) are related to each other by sharing a common entity characteristic. 
                
                Keys are the basis for representing relationship among tables. Each table must have a unique key. Keys may be natural or invented.
                
                A primary key uniquely identifies a row in a table.
                
                A foreign key duplicates the primary key in another table.
            </Page>
            <Page title="Representing Relationships: One-to-many (1:M) relationship" imgId="img24">
                This is when a primary key field of “one” entity type is foreign key in table that represents “many” entity type. For example, one salesperson sells to zero or many customers; one customer is assisted by only one salesperson. The foreign key (FK) attributes are implemented. The child (M side) class gains an extra attribute."
            </Page>
            <Page title="Representing Relationships: Many-to-many (M:N) association" imgId="img25">
                An associative entity table, which is a “extra intersection table”, is used (or created) to represent a relationship. The primary key field(s) of both entity types are used in the associative entity table which will contain at least two columns. Each row contains a pair of PKs, 1 from each object participating in association. For example, one salesperson sells many products; one product is sold by many salespersons."
            </Page>
            <Page title="Mapping inheritance to relational DB - Option 1" imgId="img26">
                • Map each class to a table
                • Superclass &amp; subclasses separate tables
                • To retrieve subclass both own table &amp; superclass must be accessed
                • Subtype discriminator is required
                
                Branch(branchNumber&lt;pk&gt;,address,phone)
                
                Account(accountNumber&lt;pk&gt;,balance, dateOpened,   branchNum&lt;fk1&gt;, typeOfAcc)
                
                SavingsAccount(accountNumber&lt;pk&gt;,interestRate)
                
                CheckingAccount(accountNumber&lt;pk&gt;,checkStyle,minBal)
            </Page>
            <Page title="Mapping inheritance to relational DB - Option 2" imgId="img26">
                • Only implement the superclass as a table
                • Attributes of subclasses become attributes of the superclass table &amp; null values when not used
                • most appropriate where subclasses differ from their superclass more in behaviour than in attributes
                • A subtype discriminator is required to indicate which subclass each row represents
                
                Branch(branchNumber&lt;pk&gt;,address,phone)
                
                Account(accountNumber&lt;pk&gt;,balance, dateOpened,  typeOfAcc, interestRate, checkStyle, minBal, branchNum&lt;fk1&gt;)
            </Page>
            <Page title="Mapping inheritance to relational DB - Option 3" imgId="img26">
                • Only implement the subclasses as tables
                • The attributes of the superclass are held in all the subclass tables 
                • Usually only works if superclass is abstract (i.e. never instantiated)
                Branch(branchNumber&lt;pk&gt;,address,phone)
                SavingsAccount(accountNumber&lt;pk&gt;, balance, dateOpened, interestRate, branchNum&lt;fk1&gt;)
                CheckingAccount(accountNumber&lt;pk&gt;, balance, dateOpened, checkStyle,minBal, branchNum&lt;fk1&gt;)
            </Page>
        </Pages>
        <Quizzes/>
    </Concept>
    <Concept title="Database Optimization" summary="Databases can store tremendous amounts of information, petabytes of information. Specific bits of data are accessed by queries written in a particular interface language, such as SQL. Database optimization involves maximizing the speed and efficiency with which data is retrieved. Database designers, administrators and analysts work together to optimize system performance through diverse methods. Thoughtful design that carefully addresses functional needs is the foundation of performance enhancement. " videoId="database_optimization">
        <Pages>
            <Page title="" imgId="">
                Databases can store tremendous amounts of information, petabytes of information. Specific bits of data are accessed by queries written in a particular interface language, such as SQL. Database optimization involves maximizing the speed and efficiency with which data is retrieved. Database designers, administrators and analysts work together to optimize system performance through diverse methods. Thoughtful design that carefully addresses functional needs is the foundation of performance enhancement.
            </Page>
            <Page title="Steps in Designing a Relational Database" imgId="">
                There are 7 basic steps to designing a relational database. There are several other steps that could be included in the database implementation and the database life cycle like, research, rollout and maintenance. 
                
                1. Create a table for each entity (class)
                2. Choose or invent primary key for each table
                3. Add foreign keys to represent one-to-many relationships
                4. Create new tables to represent many-to-many relationships
                5. Define referential integrity constraints
                6. Evaluate schema quality and make improvements
                7. Choose appropriate data types and value restrictions (if applicable) for each field (attribute)
            </Page>
            <Page title="Evaluating Schema Quality" imgId="">
                Just like any software artefact, database schemas can (or should) be evaluated against quality criteria such as understandability, expressiveness, maintainability and evolvability. Most quality evaluation approaches rely on global metrics counting simple pattern instances in schemas. 
                
                A High-quality data model has:
                • Uniqueness of table rows and primary keys 
                • Lack of redundant data "
            </Page>
            <Page title="Reducing Data Anomalies" imgId="img31">
                Ideally, a field value change should be made in only a single place. A data anomaly occurs when all of the required changes in the redundant data are not made successfully"
            </Page>
            <Page title="Types of anomaly" imgId="img32">
                Insertion anomaly
                To add each new customer in the CUSTOMER file, you must also add the corresponding agent data. If you enter several hundred new customers, you need to enter several hundred agent names and telephone numbers. The potential for creating data inconsistencies would be great.Update anomaly
                When a change to one attribute value causes the database to either contain inconsistent data or causes multiple records to need changing
                If agent Leah F. Hahn has a new phone number, that number must be entered in each of the CUSTOMER file records in which Ms. Hahn’s phone number is shown.
                In this case, only three changes must be made. In a large file system, such changes might occur in hundreds or even thousands of records.
            </Page>
            <Page title="Enforcing Entity Integrity" imgId="">
                ◦Each primary key value must be unique to ensure that each row is uniquely identified by the primary key. In that case, the table is said to exhibit entity integrity.
                ◦To maintain entity integrity,
                ◦a null is not permitted in the primary key
                ◦if the primary key is a composite key, none of the fields in the key can contain a null value
                Note:
                A null is no value at all. It does not mean a zero or a space. A null is created when you press the Enter key or the Tab key to move to the next entry without making a prior entry of any kind. Pressing the Spacebar creates a blank (or a space).

                ◦All foreign keys in the many table (the child table) must have a matching record in the parent table.
            </Page>
            <Page title="Enforcing Entity Integrity" imgId="img33">
                Referential integrity implications:
                ◦You cannot add a record in the child (many) table without a matching record in the parent table.
                ◦You cannot change a primary key that has matching child table records.
                ◦You cannot delete a record that has child records.

                Implemented in two ways:
                ◦A restricted database updates or deletes a key only if there are no matching child records.
                ◦A cascaded database will delete or update all child records when a parent record is deleted or changed.
            </Page>
        </Pages>
        <Quizzes>
            <Quiz question="How many records does the file contain?" imgResId="quiz3">
                <Answers solution="c">
                    <Answer index="a">5</Answer>
                    <Answer index="b">4</Answer>
                    <Answer index="c">7</Answer>
                    <Answer index="d">3</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How many fields are there per record?" imgResId="quiz3">
                <Answers solution="c">
                    <Answer index="a">7</Answer>
                    <Answer index="b">5</Answer>
                    <Answer index="c">3</Answer>
                    <Answer index="d">1</Answer>
                </Answers>
            </Quiz>
            <Quiz question="What problem would you encounter if you wanted to query the file to get a listing of project managers by city?" imgResId="quiz3">
                <Answers solution="d">
                    <Answer index="a">Sifting through several records.</Answer>
                    <Answer index="b">Sorting the records</Answer>
                    <Answer index="c">There is no field for city.</Answer>
                    <Answer index="d">All of the above.</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How would you solve this problem by altering the file structure?" imgResId="quiz3">
                <Answers solution="d">
                    <Answer index="a">Enforcing Entity Integrity</Answer>
                    <Answer index="b">Primary key</Answer>
                    <Answer index="c">Having A and Enforcing referential integrity</Answer>
                    <Answer index="d">Creating a table for City.</Answer>
                </Answers>
            </Quiz>
        </Quizzes>
    </Concept>
    <Concept title="Database Normalisation" summary="" videoId="">
        <Pages>
            <Page title="What is normalisation?" imgId="">
                The Process of simplifying the design of a database so that it achieves the optimum structure by converting complex data structures into simple, stable data structures."
            </Page>
            <Page title="Why do we normalise?" imgId="">
                Remove data redundancies to prevent anomalies as well as to Limit null values "
            </Page>
            <Page title="Unnormalised Database" imgId="img41">
                ◦Keep track of puppies, kennels and puppy tricks
                ◦Puppies only belong to 1 kennelDatabase schema
                PuppyTricks (P_Num&lt;pk&gt;, P_Name, K_Code, K_Name, K_Location, Tr_ID&lt;pk&gt;, Tr_Name, Tr_Level)
            </Page>
            <Page title="How do we fix this (i.e. normalise our tables)?" imgId="img41">

            </Page>
        </Pages>
        <Quizzes>
            <Quiz question="What does database normalisation involve?" imgResId="">
                <Answers solution="b">
                    <Answer index="a">Sorting records in a specified order</Answer>
                    <Answer index="b">Simplifying the design of a database</Answer>
                    <Answer index="c">Making sure all data is the same size</Answer>
                    <Answer index="d">Proof-reading all text in a database</Answer>
                </Answers>
            </Quiz>
            <Quiz question="You are given the following database file. Determine the normalised tables from the schema: Relational schema: Project (ProjectID [PK], ProjectName, ProjectStartDate, [PK]EmployeeID, EmployeeName, HoursWorked) and mark the correct ones. *Primary key indicated in BOLD" imgResId="quiz4">
                <Answers solution="d">
                    <Answer index="a">ProjEmp(ProjectID, EmployeeID,  HoursWorked)</Answer>
                    <Answer index="b">Employee(EmployeeID, EmployeeName)</Answer>
                    <Answer index="c">ProjectName(ProjectID, EmployeeID) </Answer>
                    <Answer index="d">Project(ProjectID, ProjectName, ProjectStartDate)</Answer>
                </Answers>
            </Quiz>
        </Quizzes>
    </Concept>
    <Concept title="Simple and Advanced Queries" summary="" videoId="sql_queries_and_advanced">
        <Pages>
            <Page title="Introduction" imgId="">
                SQL is a standard language for storing, manipulating, managing and retrieving data in databases. 
                
                SQL code is divided into four main categories: 
                
                Data Manipulation Language (DML): Deals with the manipulation of data present in database and this includes most of the SQL statements.
                Examples of DML:
                SELECT-is used to retrieve data from the database
                INSERT-is used to insert data into a database table
                UPDATE-is used to update existing data within a database table
                DELETE-is used to delete records from the database table 
                
                Data Definition language (DDL)-Simply deals with descriptions of the database schema and is used to create and modify the structure of the database objects in database 
                
                Examples of DDL commands: 
                
                Create-creates the database or its objects e.g. table, index, function, view, etc. 
                
                Drop-deletes database objects 
                
                Alter-Alters the database structure 
                
                Truncate-Removes all records from a database table 
                
                Comment-is used to add comments to the data dictionary 
                
                Rename-renames an existing object in the database 
                
                Data Control language (DCL): Mainly deals with controlling access to the data stored in a database 
                
                Examples of DCL commands 
                
                Grant-gives the user access to the database 
                
                Revokes-withdraws user’s access from the database 
                
                Transaction Control Language (TCL)-Deals with the transaction within the database 
                
                Examples of TCL commands 
                
                Commit-commits a transaction 
                
                Rollback-rollbacks a transaction in case of any error occurs 
                
                Savepoint-sets a savepoint within a transaction 
                
                Set Transaction-specify characteristics of the transaction "
            </Page>
        </Pages>
        <Quizzes>
            <Quiz question="What does SQl stand for?">
                <Answers solution="c">
                    <Answer index="a">Strong Question Language</Answer>
                    <Answer index="b">Structured Question Language</Answer>
                    <Answer index="c">Structured Query Language</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQl statement is used to extract data from the database">
                <Answers solution="d">
                    <Answer index="a">GET</Answer>
                    <Answer index="b">OPEN</Answer>
                    <Answer index="c">EXTRACT</Answer>
                    <Answer index="d">SELECT</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to update data in a database?">
                <Answers solution="c">
                    <Answer index="a">SAVE AS</Answer>
                    <Answer index="b">MODIFY</Answer>
                    <Answer index="c">UPDATE</Answer>
                    <Answer index="d">SAVE</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to delete data from a database?">
                <Answers solution="b">
                    <Answer index="a">REMOVE</Answer>
                    <Answer index="b">DELETE</Answer>
                    <Answer index="c">DROP DOWN</Answer>
                    <Answer index="d">COLLAPSE</Answer>
                </Answers>
            </Quiz>
            <Quiz question="What does the SQL FROM clause do?">
                <Answers solution="c">
                    <Answer index="a">Specifies the columns we are retrieving</Answer>
                    <Answer index="b">Specifies a search condition</Answer>
                    <Answer index="c">Specifies the tables to retrieve rows from</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to insert new data in a database?">
                <Answers solution="d">
                    <Answer index="a">INSERT NEW</Answer>
                    <Answer index="b">ADD RECORD</Answer>
                    <Answer index="c">ADD NEW</Answer>
                    <Answer index="d">INSERT INTO</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select a column named ”student_Number” from a table named “Student”?">
                <Answers solution="b">
                    <Answer index="a">SELECT Student.student_number;</Answer>
                    <Answer index="b">SELECT student_Number FROM Student;</Answer>
                    <Answer index="c">EXTRACT student_number FROM Student;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select all the column from a table named “student”?">
                <Answers solution="c">
                    <Answer index="a">SELECT [all] FROM Student;</Answer>
                    <Answer index="b">SELECT Student;</Answer>
                    <Answer index="c">SELECT * FROM Student;</Answer>
                    <Answer index="d">SELECT *.Student;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select all the records from a table named “student” where the value of the column “studentNumber” is “216462636”?">
                <Answers solution="a">
                    <Answer index="a">SELECT * FROM Student WHERE studentNumber=’216462636’;</Answer>
                    <Answer index="b">SELECT [all] FROM Student WHERE studentNumber LIKE ‘216462636’;</Answer>
                    <Answer index="c">SELECT [all] FROM Student WHERE studentNumber=’216462636’;</Answer>
                    <Answer index="d">SELECT * FROM Student WHERE studentNumber&lt;&gt;’216462636’;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select all the records from a table named “student” where the value of the column “studentNumber” starts with an ‘216’?">
                <Answers solution="a">
                    <Answer index="a">SELECT * FROM Student WHERE studentNumber LIKE ’%216’;</Answer>
                    <Answer index="b">SELECT [all] FROM Student WHERE studentNumber =’%216%’;</Answer>
                    <Answer index="c">SELECT [all] FROM Student WHERE studentNumber LIKE ‘216%’;</Answer>
                    <Answer index="d">SELECT * FROM Student WHERE studentNumber=’216’;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="An OR operator displays a record if ANY of the listed options are true. The AND operator displays a record is  ALL  of the conditions listed are true">
                <Answers solution="a">
                    <Answer index="a">True</Answer>
                    <Answer index="b">False</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select all the records from a table named “student” where the value of the  “studentNumber” is “216462636” and the “studentFirstname” is “Nomsa”?">
                <Answers solution="b">
                    <Answer index="a">SELECT * FROM Student WHERE studentNumber&lt;&gt;’216462636’ AND studentFirstname&lt;&gt; ‘Nomsa’;</Answer>
                    <Answer index="b">SELECT * FROM Student WHERE studentNumber= ‘216462636’ AND studentFirstname=‘Nomsa’;</Answer>
                    <Answer index="c">SELECT studentNumber= ‘216462636’, studentFirstname=‘Nomsa’ FROM Student;</Answer>
                    <Answer index="d">SELECT * FROM Student WHERE studentNumber&lt;&gt;’216462636’ OR studentFirstname=‘Nomsa’;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to select all the records from a table named “student” where the “studentFirstname” is alphabetically between(and including) “Nomsa” and “Zondo”?">
                <Answers solution="a">
                    <Answer index="a">SELECT * FROM Student WHERE studentFirstname BETWEEN  ‘Nomsa’ AND ‘Zondo’;</Answer>
                    <Answer index="b">SELECT * FROM Student WHERE studentFirstname>’Nomsa’ AND studentFirstname&lt;’Zondo’;</Answer>
                    <Answer index="c">SELECT studentFirstname>‘Nomsa’, studentFirstname&lt;’Zondo’ FROM Student;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to return only different values">
                <Answers solution="b">
                    <Answer index="a">SELECT DIFFERENT</Answer>
                    <Answer index="b">SELECT DISTINCT</Answer>
                    <Answer index="c">SELECT UNIQUE</Answer>
                </Answers>
            </Quiz>
            <Quiz question="What is the SQL keyword used to sort out the result-set">
                <Answers solution="b">
                    <Answer index="a">SORT</Answer>
                    <Answer index="b">ORDER BY</Answer>
                    <Answer index="c">SORT BY</Answer>
                    <Answer index="d">ORDER</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement used to return all records of the table named “Student” sorted in descending order of ‘studentFirstname’ ">
                <Answers solution="c">
                    <Answer index="a">SELECT * FROM Student ORDER studentFirstName DESC;</Answer>
                    <Answer index="b">SELECT * FROM Student SORT studentFirstName DESC;</Answer>
                    <Answer index="c">SELECT * FROM Student ORDER BY studentFirstName DESC;</Answer>
                    <Answer index="d">SELECT * FROM Student SORT BY studentFirstName DESC;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How do you insert a new record into the “student” table">
                <Answers solution="a">
                    <Answer index="a">INSERT INTO Student VALUES(‘216368263’,’Nomsa’,’Williams’,15);</Answer>
                    <Answer index="b">INSERT VALUES(‘216368263’,’Nomsa’,’Williams’,15) INTO Student;</Answer>
                    <Answer index="c">INSERT (‘216368263’,’Nomsa’,’Williams’,15) INTO Student;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How do you insert “Williams” as the ‘studentLastname’ in the ‘Student’ table">
                <Answers solution="a">
                    <Answer index="a">INSERT INTO Student  (studentLastname)VALUES(’Williams’);</Answer>
                    <Answer index="b">INSERT (’Williams’) INTO Student studentLastName;</Answer>
                    <Answer index="c">NSERT INTO Student (‘Williams’) INTO studentLastname;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How do you change ‘Williams’ into ‘Forbes’ in the ‘studentLastname’ column in the student table">
                <Answers solution="a">
                    <Answer index="a">UPDATE Student SET studentLastname=’Forbes’ WHERE studentLastname=’Williams’;</Answer>
                    <Answer index="b">UPDATE Student SET studentLastname=’Williams’ INTO studentLastname=’Forbes’;</Answer>
                    <Answer index="c">MODIFY Student SET studentLastname=’Forbes’ WHERE studentLastname=’Williams’;</Answer>
                    <Answer index="d">MODIFY Student SET studentLastname=’Williams’ INTO studentLastname=’Forbes’;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How do you delete records where the studentLastname is ‘Forbes’?">
                <Answers solution="c">
                    <Answer index="a">DELETE studentLastname=’Forbes’ FROM Student;</Answer>
                    <Answer index="b">DELETE ROW studentLastname=’Forbes’ FROM Student;</Answer>
                    <Answer index="c">DELETE FROM Student WHERE studentLastname=’Forbes’;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL function is used to count the number of rows in a SQL query">
                <Answers solution="c">
                    <Answer index="a">SUM()</Answer>
                    <Answer index="b">NUMBER()</Answer>
                    <Answer index="c">COUNT()</Answer>
                </Answers>
            </Quiz>
            <Quiz question="How do you return the number of records in the ‘Student’ table">
                <Answers solution="b">
                    <Answer index="a">SELECT NO(*) FROM Student;</Answer>
                    <Answer index="b">SELECT COUNT(*) FROM Student;</Answer>
                    <Answer index="c">SELECT COLUMNS(*) FROM Student;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which operator is used to select values within a range?">
                <Answers solution="a">
                    <Answer index="a">BETWEEN</Answer>
                    <Answer index="b">RANGE</Answer>
                    <Answer index="c">WITHIN</Answer>
                </Answers>
            </Quiz>
            <Quiz question="The NOT NULL constraint enforces a column to not accept null values">
                <Answers solution="a">
                    <Answer index="a">TRUE</Answer>
                    <Answer index="b">FALSE</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which one of the following operators is used to search for a specified pattern in a column">
                <Answers solution="a">
                    <Answer index="a">LIKE</Answer>
                    <Answer index="b">FROM</Answer>
                    <Answer index="c">GET</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which SQL statement is used to create a table in a database">
                <Answers solution="a">
                    <Answer index="a">CREATE TABLE</Answer>
                    <Answer index="b">CREATE DB</Answer>
                    <Answer index="c">CREATE DATABASE TABLE</Answer>
                    <Answer index="d">NEW TABLE</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Why do WHERE statements useful in SQL">
                <Answers solution="b">
                    <Answer index="a">To see where the data is in the database</Answer>
                    <Answer index="b">To select what they want to see from a criterion in the WHERE statement</Answer>
                </Answers>
            </Quiz>
            <Quiz question="Which one of the following SQL statements has the correct syntax">
                <Answers solution="a">
                    <Answer index="a">SELECT * FROM Student WHERE studentAge==10;</Answer>
                    <Answer index="b">SELECT * FROM Student WHERE studentAge>=10;</Answer>
                    <Answer index="c">SELECT * FROM Student WHERE studentAge=>10;</Answer>
                </Answers>
            </Quiz>
            <Quiz question="The UPDATE SQL clause can">
                <Answers solution="d">
                    <Answer index="a">Delete more than one row at a time</Answer>
                    <Answer index="b">Delete only one row at a time</Answer>
                    <Answer index="c">Update more than one row at a time</Answer>
                    <Answer index="d">Update only one row at a time</Answer>
                </Answers>
            </Quiz>
        </Quizzes>
    </Concept>

</Concepts>